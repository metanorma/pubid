# This is the monorepo version of the metanorma/ci/generic-rake.yml workflow.
name: generic-rake

on:
  workflow_call:
    inputs:
      gem_name:
        description: 'Select gem to test (for monorepo mode)'
        required: false
        type: string
      gem_directory:
        description: 'Directory containing individual gems'
        required: false
        type: string
        default: 'gems'
      monorepo:
        description: 'Enable monorepo mode'
        required: false
        type: boolean
        default: false
      tests-passed-event:
        description: 'Name of event sent with repository-dispatch after rake tests are passed successfully'
        default: 'tests-passed'
        type: string
      release-event:
        description: 'Name of event sent to initiate release'
        default: 'do-release'
        type: string
    secrets:
      pat_token:
        required: false

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      head_tag: ${{ steps.check.outputs.head_tag }}
      foreign_pr: ${{ steps.check.outputs.foreign_pr }}
      ruby_matrix: ${{ steps.ruby_matrix.outputs.value }}
      gems_matrix: ${{ steps.gems_matrix.outputs.value }}
      combined_matrix: ${{ steps.combined_matrix.outputs.value }}
      push_for_tag: ${{ steps.push_for_tag.outputs.value }}
      default_ruby_version: ${{ steps.config.outputs.default_ruby_version }}
      public: ${{ steps.repo_status.outputs.public }}
    steps:
    - uses: actions/checkout@v4

    - name: retrieve tags
      run: git fetch --depth=1 origin +refs/tags/*:refs/tags/* || true

    - name: set output variables
      id: check
      run: |
        fpr="no"
        tag=""
        if [[ "${{ github.ref }}" == refs/heads/* ]]; then
          tag="$(git tag --points-at HEAD)"
        elif [[ "${{ github.ref }}" == refs/pull/* ]] && [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.event.pull_request.base.repo.full_name }}" ]; then
          fpr="yes"
        fi
        echo "foreign_pr=${fpr}"
        echo "head_tag=${tag}"
        echo "foreign_pr=${fpr}" >> $GITHUB_OUTPUT
        echo "head_tag=${tag}" >> $GITHUB_OUTPUT

    - name: Push for tag
      id: push_for_tag
      shell: python
      run: |
        import os
        event_name = '${{ github.event_name }}'
        repository = '${{ github.repository }}'
        head_tag = '${{ steps.check.outputs.head_tag }}'
        excluded_events = ['pull_request', 'workflow_dispatch', 'repository_dispatch', 'cron']
        excluded_repositories = ['metanorma/isodoc', 'metanorma/metanorma-standoc']
        is_excluded_event = event_name in excluded_events
        push_condition = event_name == 'push' and (head_tag == '' or repository in excluded_repositories)
        result = str(not (is_excluded_event or push_condition)).lower()
        print(f"The result is: {result}")
        os.system(f"echo value={result} >> {os.environ['GITHUB_OUTPUT']}")

    - id: ruby_matrix
      run: |
        value="$(curl -L https://raw.githubusercontent.com/metanorma/ci/main/.github/workflows/ruby-matrix.json)"
        echo "value=$(echo ${value} | tr '\n' ' ')" >> $GITHUB_OUTPUT

    - if: ${{ inputs.monorepo }}
      id: gems_matrix
      run: |
        # Get list of gems from gems/ directory
        if [ -d "${{ inputs.gem_directory }}" ]; then
          gems=$(ls ${{ inputs.gem_directory }}/ | jq -R -s -c 'split("\n")[:-1]')
        else
          gems='[]'
        fi
        echo "value=${gems}" >> $GITHUB_OUTPUT

    - if: ${{ inputs.monorepo }}
      id: combined_matrix
      run: |
        # Create combined matrix for gems and ruby versions
        ruby_matrix='${{ steps.ruby_matrix.outputs.value }}'
        gems_array='${{ steps.gems_matrix.outputs.value }}'

        # Create combined matrix
        combined=$(echo "$ruby_matrix" | jq --argjson gems "$gems_array" '
          .ruby as $ruby_configs |
          .os as $os_list |
          $gems as $gem_list |
          {
            "include": [
              $gem_list[] as $gem |
              $ruby_configs[] as $ruby |
              $os_list[] as $os |
              {
                "gem": $gem,
                "ruby": $ruby,
                "os": $os
              }
            ]
          }
        ')

        echo "value=$(echo ${combined} | tr '\n' ' ')" >> $GITHUB_OUTPUT

    - id: config
      run: |
        value="$(curl -L https://raw.githubusercontent.com/metanorma/ci/main/.github/workflows/config.json | jq .ruby.version -r)"
        echo "default_ruby_version=${value}" >> $GITHUB_OUTPUT

    - id: repo_status
      uses: metanorma/ci/gh-repo-status-action@main

  rake-traditional:
    name: Test on Ruby ${{ matrix.ruby.version }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: prepare
    if: needs.prepare.outputs.push-for-tag != 'true' && !inputs.monorepo
    concurrency:
      group: '${{ github.workflow }}-${{ matrix.os }}-${{ matrix.ruby.version }}-${{ github.head_ref || github.ref_name }}'
      cancel-in-progress: true
    continue-on-error: ${{ matrix.ruby.experimental }}
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix: ${{ fromJson(needs.prepare.outputs.ruby_matrix) }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby.version }}
        bundler-cache: true
        rubygems: ${{ matrix.ruby.rubygems }}
        bundler: ${{ matrix.ruby.bundler }}

    - run: bundle exec rake

    - if: needs.prepare.outputs.public == 'true' && matrix.os == 'ubuntu-latest' && matrix.ruby.version == needs.prepare.outputs.default-ruby-version
      uses: codecov/codecov-action@v4
      with:
        file: coverage/.resultset.json

  rake-monorepo:
    name: Test ${{ matrix.gem }} on Ruby ${{ matrix.ruby.version }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: prepare
    if: needs.prepare.outputs.push-for-tag != 'true' && inputs.monorepo
    concurrency:
      group: '${{ github.workflow }}-${{ matrix.gem }}-${{ matrix.os }}-${{ matrix.ruby.version }}-${{ github.head_ref || github.ref_name }}'
      cancel-in-progress: true
    continue-on-error: ${{ matrix.ruby.experimental }}
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix: ${{ fromJson(needs.prepare.outputs.combined_matrix) }}
    defaults:
      run:
        working-directory: ${{ format('{0}/{1}', inputs.gem_directory, matrix.gem) }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby.version }}
        bundler-cache: true
        rubygems: ${{ matrix.ruby.rubygems }}
        bundler: ${{ matrix.ruby.bundler }}
        working-directory: ${{ format('{0}/{1}', inputs.gem_directory, matrix.gem) }}

    - run: bundle exec rake

    - if: needs.prepare.outputs.public == 'true' && matrix.os == 'ubuntu-latest' && matrix.ruby.version == needs.prepare.outputs.default-ruby-version
      uses: codecov/codecov-action@v4
      with:
        file: ${{ format('{0}/{1}/coverage/.resultset.json', inputs.gem_directory, matrix.gem) }}

  tests-passed:
    needs: [rake-traditional, rake-monorepo]
    if: always() && (needs.rake-traditional.result == 'success' || needs.rake-traditional.result == 'skipped') && (needs.rake-monorepo.result == 'success' || needs.rake-monorepo.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
    - if: ${{ inputs.monorepo }}
      uses: peter-evans/repository-dispatch@v3
      name: Tests passed (monorepo)
      with:
        token: ${{ secrets.pat_token || github.token }}
        repository: ${{ github.repository }}
        event-type: ${{ inputs.tests-passed-event }}
        client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "type": "${{ inputs.tests-passed-event }}", "gem-name": "${{ inputs.gem_name }}"}'

    - if: ${{ !inputs.monorepo }}
      uses: peter-evans/repository-dispatch@v3
      name: Tests passed (traditional)
      with:
        token: ${{ secrets.pat_token || github.token }}
        repository: ${{ github.repository }}
        event-type: ${{ inputs.tests-passed-event }}
        client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "type": "${{ inputs.tests-passed-event }}"}'

    - if: startsWith(github.ref, 'refs/tags/v') && inputs.monorepo
      name: Repository ready for release (monorepo)
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.pat_token || github.token }}
        repository: ${{ github.repository }}
        event-type: ${{ inputs.release-event }}
        client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "type": "${{ inputs.release-event }}", "gem-name": "${{ inputs.gem_name }}"}'

    - if: startsWith(github.ref, 'refs/tags/v') && !inputs.monorepo
      name: Repository ready for release (traditional)
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.pat_token || github.token }}
        repository: ${{ github.repository }}
        event-type: ${{ inputs.release-event }}
        client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "type": "${{ inputs.release-event }}"}'
