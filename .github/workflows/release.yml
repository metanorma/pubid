# Releases all pubid gems to RubyGems and creates a GitHub release.
name: release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - skip
      dry_run:
        description: 'Dry run (do not actually release)'
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3'
        bundler-cache: true

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Check version synchronization
      run: |
        bundle exec rake version:check

    - name: Bump version
      if: ${{ inputs.version_type != 'skip' }}
      run: |
        bundle exec rake version:bump[${{ inputs.version_type }}]
        echo "NEW_VERSION=$(bundle exec rake version:show | grep 'Master version:' | cut -d' ' -f3)" >> $GITHUB_ENV

    - name: Get current version (skip mode)
      if: ${{ inputs.version_type == 'skip' }}
      run: |
        echo "NEW_VERSION=$(bundle exec rake version:show | grep 'Master version:' | cut -d' ' -f3)" >> $GITHUB_ENV

    - name: Commit version changes
      if: ${{ !inputs.dry_run && inputs.version_type != 'skip' }}
      run: |
        git add -A
        git commit -m "Bump version to ${{ env.NEW_VERSION }}"
        git tag "v${{ env.NEW_VERSION }}"

    - name: Build all gems
      run: |
        bundle exec rake build:all

    - name: Setup RubyGems credentials
      if: ${{ !inputs.dry_run }}
      run: |
        mkdir -p ~/.gem
        cat > ~/.gem/credentials << EOF
        ---
        :rubygems_api_key: ${{ secrets.METANORMA_CI_RUBYGEMS_API_KEY }}
        EOF
        chmod 0600 ~/.gem/credentials

    - name: Release gems to RubyGems
      if: ${{ !inputs.dry_run }}
      run: |
        # Validate release order first
        bundle exec rake release:validate_order

        # Read gems from JSON file in dependency order
        GEMS=($(jq -r '.release_order[]' release-order.json))

        for gem in "${GEMS[@]}"; do
          echo "Releasing $gem..."
          cd "gems/$gem"
          gem_file=$(ls *.gem | head -1)
          if [ -f "$gem_file" ]; then
            gem push "$gem_file"
            echo "✓ Released $gem"
          else
            echo "✗ No gem file found for $gem"
            exit 1
          fi
          cd ../..
          # Wait a bit between releases to avoid rate limiting
          sleep 10
        done

    - name: Push changes and tags
      if: ${{ !inputs.dry_run && inputs.version_type != 'skip' }}
      run: |
        git push origin main
        git push origin "v${{ env.NEW_VERSION }}"

    - name: Generate release body
      if: ${{ !inputs.dry_run && inputs.version_type != 'skip' }}
      run: |
        # Generate release body with gems from JSON file
        echo "## Release v${{ env.NEW_VERSION }}" > release_body.md
        echo "" >> release_body.md
        echo "This release includes all pubid gems synchronized to version ${{ env.NEW_VERSION }}." >> release_body.md
        echo "" >> release_body.md
        echo "### Released Gems:" >> release_body.md

        # Read gems from JSON and add to release body
        jq -r '.release_order[]' release-order.json | while read gem; do
          echo "- $gem v${{ env.NEW_VERSION }}" >> release_body.md
        done

    - name: Create GitHub Release
      if: ${{ !inputs.dry_run && inputs.version_type != 'skip' }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "v${{ env.NEW_VERSION }}"
        release_name: "Release v${{ env.NEW_VERSION }}"
        body_path: release_body.md
        draft: false
        prerelease: false

    - name: Skip mode summary
      if: ${{ !inputs.dry_run && inputs.version_type == 'skip' }}
      run: |
        echo "## Skip Mode Release Summary"
        echo "Released gems at current version: ${{ env.NEW_VERSION }}"
        echo "Skipped: version bump, git commit, git tag, GitHub release"
        echo "Completed: gem build and gem push to RubyGems"

    - name: Dry run summary
      if: ${{ inputs.dry_run }}
      run: |
        echo "## Dry Run Summary"
        echo "Would have released version: ${{ env.NEW_VERSION }}"
        echo "All gems built successfully:"
        find gems -name "*.gem" -exec basename {} \;
